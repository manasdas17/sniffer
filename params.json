{"name":"Sniffer","tagline":"A poor man MOSS (Measure of software similarity) ","body":"About\r\n-----\r\n\r\nThis program is intended to be used to check plagiarism in assignments. It is a\r\npoor man's `MOSS<http://theory.stanford.edu/~aiken/moss/>`_.\r\n\r\nStatus \r\n======\r\n \r\n  Under development but can be used. Report bugs on it `github\r\n  page<http://github.com/dilawar/sniffer>`_.\r\n\r\nDependency \r\n=========\r\n\r\n1. Python2.6 or later\r\n2. python-pdfminer (for pdf file)\r\n3. python-sqlite3\r\n\r\n\r\nUsage \r\n=====\r\n\r\nThe default path for configuration file is ``~/.config/sniffer/config``. For\r\nnon-standard location, use ``--config`` option.::\r\n\r\n  code-sniffer --config config-file-path\r\n\r\nIf you want to run it from the repository then run the ``run.sh`` file in\r\nterminal. Make sure you have ``python-pdfmider`` library installed.\r\n\r\n\r\nSee the following section on how to edit the `snifferrc` file.\r\n\r\nConfig file \r\n===========\r\n\r\nA sample config file is shown below\r\n\r\n::\r\n    [source]\r\n\r\n    # This is main directory.\r\n    # This directory contains folders. Each folder is compared against every\r\n    # other folder.\r\n    # Each folder is walked and files matching `regex` are collected. These\r\n    # files will be compared.\r\n    dir = /home/dilawar/Works/hpc21/2013ee668/Assignments/A4/Submissions\r\n\r\n    # This is the regular expression of the names of files. If you want to compare\r\n    # all files leave it empty or .* will do. In this example, we will only\r\n    # consider files which are ended with vhdl or vhd extension.\r\n    regex = .*(vhdl|vhd)$\r\n\r\n    # Specify language of file.\r\n    # Available : vhdl, verilog, ctype, text, pdf. If in doubt make it text.\r\n    # Further support to be added to other languages as well. \r\n    language = vhdl\r\n\r\n    # Make compare true if you want to compare. If this is not set to true, it won't\r\n    # match. This is here for development purpose. In most cases, this should be\r\n    # true.\r\n    compare = true\r\n\r\n    # Dump the results of analysis in directory of `database`.\r\n    analyze_result = true \r\n\r\n    # Currently useless.\r\n    send_email = false\r\n\r\n    [filter]\r\n    # If this regex is found in the text of file, then the file is ignored. The\r\n    # format of regex is defined in python re library.\r\n    regex = ((Madhav\\s+Desai)|(entity\\s+(reg|\\w*mux\\w*|unsigned\\_(comparator|adder)|mux\\dto\\d|decoder\\dto\\d|Datapath)\\s+is)|(operand1.+operand2.+result.+overflow)|(data\\_in.+data\\_out.+clock))\r\n    regex_flags = DOTALL,IGNORECASE \r\n\r\n    # larger than this size will be ignored. -1 for all. In Kb\r\n    max_size = -1\r\n\r\n    # Max words a text file can contains. -1 for 2^32.\r\n    max_words = 10000\r\n    # Mininum words a text files must contain.\r\n    min_words = 100\r\n\r\n    [algorithm]\r\n    # Available algoritms : difflib, quick, . Quick is not available in this\r\n    # relase. So leave it unchanged.\r\n    name = difflib\r\n\r\n    [database]\r\n    # Path where sqlite3 database should be saved. Generated graphviz files will\r\n    # be saved to this file only. After match is complete, results are stored in\r\n    # csv files. identical_severity.csv has the almost matching files followed\r\n    # by very_high_serverity.csv, high_serverity.csv etc.\r\n    path = /home/dilawar/Works/hpc21/2013ee668/Assignments/A4/db/\r\n\r\n    # Name of the database. Leave it as it is. If :memory: is used then database\r\n    # is build in memory. Untested feature.\r\n    name = sniffer.sqlite3 \r\n    #name = :memory:\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}